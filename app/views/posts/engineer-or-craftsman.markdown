Those of you who don't write software professionally might be surprised to know that software developers are somewhat divided about what they should be *called*. (In fact, most software developers are probably themselves not even aware of any such division.) I first became aware of this a few years ago, when one of my coworkers informed me: "I am *not* an engineer." When I asked for clarification, he followed up with: "What I do is not engineering."

My initial reaction to this, I'll admit, was simply: *Interesting. Some people care about this.* At the time I didn't have much of an opinion myself. I figured, let the "engineers" call themselves engineers, and let the others call themselves what they like. Just words, right?

Over time I think I've come to understand where my old teammate was coming from. I still don't think he was right or wrong--or rather, I wouldn't quite agree with the premise "There's no such thing as software engineering"[^no-such-thing]--but I would say that labeling the entire practice of developing software as "engineering" would be wrong. There are some who disagree with me, of course.

But before I continue, let me point you to [this Steve Yegge post from August 2012](https://plus.google.com/110981030061712822816/posts/KaSKeg4vQtz), in which he argues that software professionals exist along a spectrum from *conservative* to *liberal* (not to be confused with the political orientations). Going back even further, read the article ["The Rise of *Worse is Better*" by Richard Gabriel](http://www.dreamsongs.com/RiseOfWorseIsBetter.html). It explores a similar theme, which posits two fundamentally different approaches to designing software. In Gabriel's terms, these are the "MIT approach", which prefers *interface* simplicity (think: careful planning, elegant design, clever implementation); and the "New Jersey approach", which prefers *implementation* simplicity (think: less planning, simple design, dumb implementation).

A term that has grown in popularity even since I've been working--which is not that long--is "software craftsman."" I think that what Yegge labeled "liberalism" and what Gabriel referred to as the "New Jersey approach" is something at the heart of why many developers have adopted this term for themselves. In contrast, there are many developers who still prefer the term "engineer"; and I believe these individuals would identify much more strongly with Gabriel's "MIT approach", or--perhaps less enthusiastically, due to the connotations--with Yegge's "conservative" label.

Fundamentally the difference between these labels, as I see it, has to do with the concept of *correctness*. (Warning: I'm about to launch into an oversimplification for the purpose illustration. Obviously I'm not saying that the following applies to individuals perfectly.)

**Engineers** want to be correct. They learn how to build software, and they formalize their learnings into reusable rules that can be taught and enforced.

[^no-such-thing]: Not to put words in his mouth, but I did get the impression back then that this was actually his viewpoint. Of course, I don't think it really matters since I haven't even revealed his name.
